<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Destiny 2 Build Creator</title>
  <style>
    body {
      background: #0f0f1a;
      color: #fff;
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
    }
    h1 {
      font-size: 2rem;
      margin-bottom: 1rem;
    }
    .mode-toggle button {
      padding: 8px 16px;
      margin-right: 10px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: bold;
    }
    .active {
      background: #4ade80;
      color: #000;
    }
    .inactive {
      background: #333;
      color: #fff;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 16px;
      margin-top: 20px;
    }
    .card {
      background: #1e1e2f;
      border-radius: 10px;
      padding: 16px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.4);
    }
    label {
      font-weight: bold;
      display: block;
      margin-bottom: 8px;
    }
    input[type=range] {
      width: 100%;
    }
    .result {
      margin-top: 20px;
      font-size: 1.1rem;
    }
    .ok { color: #4ade80; }
    .error { color: #f87171; }
  </style>
</head>
<body>
  <h1>Destiny 2 Build Creator</h1>

  <div class="mode-toggle">
    <button id="balancedBtn" class="active">Balanced Tuning</button>
    <button id="tuningBtn" class="inactive">Stat Tuning Mods</button>
  </div>

  <div id="statsContainer" class="grid"></div>

  <div class="result">
    <p id="totalDisplay"></p>
    <p id="feasibility"></p>
  </div>

<script>
  const STATS = ["Super", "Melee", "Class", "Grenade", "Health", "Weapons"];
  let desiredStats = Object.fromEntries(STATS.map(s => [s, 0]));
  let mode = "balanced";

  const statsContainer = document.getElementById("statsContainer");
  const totalDisplay = document.getElementById("totalDisplay");
  const feasibility = document.getElementById("feasibility");
  const balancedBtn = document.getElementById("balancedBtn");
  const tuningBtn = document.getElementById("tuningBtn");

  function renderSliders() {
    statsContainer.innerHTML = "";
    STATS.forEach(stat => {
      const card = document.createElement("div");
      card.className = "card";

      const label = document.createElement("label");
      label.innerText = stat;

      const slider = document.createElement("input");
      slider.type = "range";
      slider.min = 0;
      slider.max = 200;
      slider.step = 5;
      slider.value = desiredStats[stat];
      slider.addEventListener("input", e => {
        desiredStats[stat] = parseInt(e.target.value);
        updateTotals();
        valueDisplay.innerText = desiredStats[stat];
      });

      const valueDisplay = document.createElement("div");
      valueDisplay.style.marginTop = "6px";
      valueDisplay.innerText = desiredStats[stat];

      card.appendChild(label);
      card.appendChild(slider);
      card.appendChild(valueDisplay);
      statsContainer.appendChild(card);
    });
  }

  function updateTotals() {
    const MAX_POINTS = mode === "balanced" ? 103 * 5 : 100 * 5;
    const totalDesired = Object.values(desiredStats).reduce((a,b) => a+b, 0);

    totalDisplay.innerText = `Total Desired: ${totalDesired} / ${MAX_POINTS}`;
    if(totalDesired > MAX_POINTS){
      feasibility.innerText = "❌ Impossible build – exceeds maximum stat budget.";
      feasibility.className = "error";
    } else {
      feasibility.innerText = "✅ Build is within limits. Archetype suggestion logic coming here.";
      feasibility.className = "ok";
    }
  }

  balancedBtn.addEventListener("click", () => {
    mode = "balanced";
    balancedBtn.className = "active";
    tuningBtn.className = "inactive";
    updateTotals();
  });

  tuningBtn.addEventListener("click", () => {
    mode = "tuning";
    tuningBtn.className = "active";
    balancedBtn.className = "inactive";
    updateTotals();
  });

  renderSliders();
  updateTotals();
</script>
</body>
</html>
